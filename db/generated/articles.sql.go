// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: articles.sql

package db

import (
	"context"
)

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (name) VALUES (?1) RETURNING id, name
`

func (q *Queries) CreateArticle(ctx context.Context, name string) (Article, error) {
	row := q.db.QueryRowContext(ctx, createArticle, name)
	var i Article
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteArticle = `-- name: DeleteArticle :exec
DELETE FROM articles WHERE id = ?1
`

func (q *Queries) DeleteArticle(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteArticle, id)
	return err
}

const getArticle = `-- name: GetArticle :one
SELECT id, name FROM articles WHERE id = ?
`

func (q *Queries) GetArticle(ctx context.Context, id int64) (Article, error) {
	row := q.db.QueryRowContext(ctx, getArticle, id)
	var i Article
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listArticles = `-- name: ListArticles :many
SELECT id, name FROM articles ORDER BY id
`

func (q *Queries) ListArticles(ctx context.Context) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, listArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticle = `-- name: UpdateArticle :one
UPDATE articles SET name = ?1 WHERE id = ?2 RETURNING id, name
`

type UpdateArticleParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateArticle(ctx context.Context, arg UpdateArticleParams) (Article, error) {
	row := q.db.QueryRowContext(ctx, updateArticle, arg.Name, arg.ID)
	var i Article
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
